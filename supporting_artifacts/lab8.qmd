---
title: "Lab 8: The 12 Days of Christmas"
author: "Pablo Nguyen"
format:
  html:
    fig-cap-location: top
    theme: cerulean
    self-contained: true
    code-overflow: wrap
    code-tools: true
    code-fold: true
execute: 
  echo: true
  errors: true
  warning: false
  messages: false
---
## Setup
```{r packages}
#| include: false
library(dplyr)
library(glue)
library(stringr)
library(purrr)
```

```{r}
xmas <- read.csv("https://www.dropbox.com/s/e584pryn8evm1gz/xmas.csv?dl=1")
```
## Pluralize Gift
```{r pluralize-function}
# Function that takes a noun and makes it plural
# Arguments -- gift -- A string or vector of strings
# Return -- A string or vector of strings with the pluralized words

pluralize_gift <- function(gift){

  gift <- case_when( str_detect(gift, pattern = "oo") 
    ~ str_replace(string = gift, pattern = "oo", replacement =  "ee"),
    str_detect(gift, pattern = "y$") 
    ~ str_replace(string = gift, pattern = "y$", replacement = "ies"),
    TRUE ~ str_c(gift, "s", sep = ""))
  
return(gift)

}
```
## Make Phrase
```{r phrase-function}
make_phrase <- function(day, num_word, item, verb, adjective, location) {
  ##using as.english to convert integer into word
  ##https://stackoverflow.com/questions/46652066/convert-integer-to-words
  
  num_word <- english::as.english(day)
  ## Step 1: Replace NAs with blank strings
  verb <- str_replace_na(string = verb, replacement = "")
  num_word <- str_replace_na(string = num_word, replacement = "")
  day <- str_replace_na(string = day, replacement = "")
  item <- str_replace_na(string = item, replacement = "")
  adjective <- str_replace_na(string = adjective, replacement = "")
  location <- str_replace_na(string = location, replacement = "")
  ## Step 2: If the day is larger than 1, the items need pluralized! 
  
  item <- case_when(day >  1 ~ pluralize_gift(item),
                    TRUE ~item)
  ## Step 3: If the day is 1, you need to add an "a" or "an" before the gift 
  num_word <-
    case_when(day == 1 & str_detect(item, pattern = "^[aeiou]") ~ "an",
            day == 1 & !str_detect(item, pattern = "^[aeiou]") ~ "a",
            TRUE ~num_word)
  ## Step 4: Glue all of the pieces together to make a phrase! 
  return_string <- glue("{num_word} {adjective} {item} {verb} {location}") |>
    str_squish()
  return(return_string)
}
```

```{r}
xmas2 <- xmas %>%
  mutate(Full.Phrase = pmap_chr(.l = list(Day, Day,
                                          Gift.Item, Verb, 
                                          Adjective, Location), 
                                .f = make_phrase)
         )
```
## Step 3: Iteration: Sing Day

```{r sing_day}
sing_day <- function(df, day, col){
  stopifnot(is.data.frame(df), is.numeric(day))
  #step 1: set up the intro line
  num_word <- english::ordinal(day)
  intro <- 
    glue::glue("On the {num_word} day of Christmas, my true love sent to me:")

  #step 2: sing the gift phrases
  phrases <- df |>
    pull({{col}})
  #put intro, then reverse order of phrases into lyrics
  lyrics <- c(intro, phrases[day:1])
  #step 3: put it all together
  #flatten phrases into 1 string separated by newlines, 
  #double newline at the end to seperate days
  output_string <- str_flatten(lyrics, collapse = "\n") |>
    str_c("\n\n") 
 return(output_string)
}
```

**1.1: a small test**
```{r test}
xmas2 |>
  sing_day(day = 2, col = Full.Phrase) |>
  cat()
```

## 2: Step 4: Use your functions
```{r using functions}
1:12 |>
  map_chr( ~ sing_day(xmas2, .x, Full.Phrase)) |>
  cat()
```

