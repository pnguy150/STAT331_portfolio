---
title: "STAT 331 Portfolio"
author: "Pablo Nguyen"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an A.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from a Lab or Challenge assignment where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`.\
    Lab 2 Question 1

```{r wd-1-csv}

surveys <- read_csv(file =  here( "week2" , "labs" , "surveys.csv" ))

```

-   `xlsx`

    Practice Activity 4 Question 1

```{r wd-1-xlsx}
library(readxl) 
library(tidyverse)

military <- read_xlsx(here::here("data", "gov_spending_per_capita.xlsx"), 
                      sheet = "Share of Govt. spending", 
                      skip = 6, n_max =192)

```

-   `txt`

    Practice Activity 5.2 Setup

```{r wd-1-txt}
message <- read_csv(here::here("data", "scrambled_message.txt")
                      )
```

**WD-2: I can select necessary columns from a dataset.** Lab 3 Question 9

```{r wd-2}
demographics_information <- hiphop_clean |>
  distinct( subj , .keep_all = TRUE) |>
  select(sex:ethnic, ethnic1) 

```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

    Lab 3 Question 11

```{r wd-3-numeric}
hiphop_clean |>
  group_by(word) |>
  filter(age < 20) |> 
  summarize(mean_word_score = mean(as.numeric(familiarity))) |>
  slice_max(order_by = mean_word_score)
```

-   character -- specifically a string

    Lab 4 Question 2: Data Cleaning

```{r wd-3-string}
avocado_clean <- avocado |>
  filter(region != "TotalUS") |>
  rename("Small_Hass" = '4046', "Large_Hass" = '4225',
         "Extra_Large_Hass" = '4770') 

```

-   factor

    Lab 3 Question 13: "Male" and "ethnic1" were Factors

```{r wd-3-factor}
hiphop_clean |>
  group_by(word) |>
  filter(sex == "Male", ethnic1 == "white", age > 30) |> 
  summarize(mean_word_score = mean(as.numeric(familiarity))) |>
  slice_max(order_by = mean_word_score)

```

-   date

    Practice Activity 5.1 (Lubridate) Question 2

```{r wd-3-date}
suspects <- suspects %>%
  filter(!wday(Time.Spotted, label = TRUE, abbr = FALSE) %in% 
           c("Tuesday" , "Thursday"))

```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

    PA 3, Question 6

```{r wd-4-numeric}
colleges_clean <- colleges_clean |> 
  mutate(TUITION_DIFF = TUITIONFEE_OUT - TUITIONFEE_IN)

```

-   character -- specifically a string

    Lab 3 Question 7

```{r wd-4-string}
hiphop_clean <- hiphop_clean |> 
  mutate(ethnic1 = if_else(condition = ethnic == "white" ,true = "white" ,
                           false = "nonwhite"), 
         ethnic1 = as.factor(ethnic1))


```

-   factor

    Lab 3 Question 5 (revision)

```{r wd-4-factor}
hiphop_clean <- hiphop |>
  select(-c(numPreferredArtists , numOverallArtists)) |>
  mutate(
    across( .cols = c(word , subj , sex , ethnic , familiarity , fam1 , jayz ,
                  jayz1 , barkley , boondocks , boondocks1 , monique , bieber) ,
           ~as.factor(.x))
  )
```

-   date

    PA 5, Question 1

```{r wd-4-date}
suspects <- suspects %>%
  mutate(Time.Spotted = ymd_hms(Time.Spotted),
         Time.Spotted = force_tz(Time.Spotted,
                                 tzone = "America/Los_Angeles")
         )
```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

```{r wd-5-left}

```

-   `right_join()`

```{r wd-5-right}

```

-   `inner_join()`

    Preview Activity 4.3.1

```{r wd-5-inner}
inner_join(prof_info, prof_course)
```

-   `full_join()`

    Preview Activity 4.3.2

```{r wd-5-full}
full_join(prof_info, prof_course)


```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

    Lab 4 Data Cleaning (2)

```{r wd-6-semi}
avocado_clean_major_region <- avocado_clean |>
  semi_join( super_regions, by = "region") 

```

-   `anti_join()`

    Lab 4 Data Cleaning (2)

```{r wd-6-anti}
avocado_clean_subregion <- avocado_clean |>
  anti_join(super_regions, by = "region") 

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

    Lab 4 Question 7

```{r wd-7-long}
avocado_ratios <- four_cities |>
  pivot_longer(cols = c("Small_Hass":"Extra_Large_Hass"),
               names_to = "Avocado_Type",
               values_to = "Total") |>
  group_by(region,Avocado_Type, type) |>
  summarise(total = sum(Total))


```

-   `pivot_wider()`

    Lab 4 Question 6

```{r wd-7-wide}
averages <- four_cities |>
  group_by(region, type) |>
  summarise(average = mean(AveragePrice)) |>
  pivot_wider(names_from = type, values_from = average) |>
  mutate(Difference = abs(conventional - organic))
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments:

**R-2: I can write well documented and tidy code.**

-   Example 1

    Lab 5 Question 3.3 (revision)

```{r r-2-1}
surveys |>
  mutate(weekday = factor(lubridate::wday(x = date, label = TRUE), 
                          levels = day_levels)) |> #order factors mon-sun
  filter(!is.na(date)) |> 
  #collapse Weekends and Weekdays 
  mutate(weekday = fct_collapse(.f = weekday,
                              "Weekday" = c("Mon", "Tue", "Wed", "Thu", "Fri"),
                              "Weekend" = c( "Sat", "Sun"))) |> 
  ggplot(mapping = aes(x = weekday)) +
  geom_bar() +
  labs(title = "Number of Captured Rodents by Weekday vs Weekend", y = NULL, 
       x = "Weekday vs Weekend")
```

-   Example 2

    Lab 3 Question 7

```{r r-2-2}
hiphop_clean <- hiphop_clean |> 
  mutate(ethnic1 = if_else(condition = ethnic == "white" ,true = "white" ,
                           false = "nonwhite"), 
         ethnic1 = as.factor(ethnic1))


```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example 1

    Lab 3 Question 5 (revision)

```{r r-3-1}
hiphop_clean <- hiphop |>
  select(-c(numPreferredArtists , numOverallArtists)) |>
  mutate(
    across( .cols = c(word , subj , sex , ethnic , familiarity , fam1 , jayz ,
                  jayz1 , barkley , boondocks , boondocks1 , monique , bieber) ,
           ~as.factor(.x))
  )

```

-   Example 2

    Lab 3 Question 11

```{r r-3-2}
hiphop_clean |>
  group_by(word) |>
  filter(age < 20) |> 
  summarize(mean_word_score = mean(as.numeric(familiarity))) |>
  slice_max(order_by = mean_word_score)

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   numeric variables

    Lab 2 Question 6

```{r dvs-1-num}
ggplot(data = surveys , mapping = aes(x = weight , y = hindfoot_length)) +
  geom_jitter(alpha = .2)
```

-   numeric variables and categorical variables

    Lab 4 Question 6

```{r dvs-2-num-cat}
ggplot(data = averages, mapping = aes(x = region, y = Difference)) +
  geom_segment(mapping = aes(yend = 0,
                   xend = region)
  ) +
  geom_point() +
  labs(title = "Difference in Average Price between Conventional and Organic 
       Avocados by City", x = "City", y = "Average Price")


```

-   categorical variables

    Lab 3 Question 10

```{r dvs-2-cat}
ggplot(data = demographics_information, aes(x = sex)) +
  geom_bar() + 
  labs(x = "Sex (Male vs Female)", y = ("Count") , 
       title = "Count of Males Vs Females") +
  theme(legend.position = "none")
```

-   dates

    Lab 5 Question 3.3 (revision)

```{r dvs-2-date}
surveys |>
  mutate(weekday = factor(lubridate::wday(x = date, label = TRUE), 
                          levels = day_levels)) |> #order factors mon-sun
  filter(!is.na(date)) |> 
  #collapse Weekends and Weekdays 
  mutate(weekday = fct_collapse(.f = weekday,
                              "Weekday" = c("Mon", "Tue", "Wed", "Thu", "Fri"),
                              "Weekend" = c( "Sat", "Sun"))) |> 
  ggplot(mapping = aes(x = weekday)) +
  geom_bar() +
  labs(title = "Number of Captured Rodents by Weekday vs Weekend", y = NULL, 
       x = "Weekday vs Weekend")
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   Example 1

    Lab 5 Question 2.4

```{r dvs-2-1}
summarized_surveys |>
  ggplot(mapping = aes( x = year, y = mean_weight, 
                                          color = fct_reorder2(.f = species,
                                                            .x = mean_weight,
                                                        .y =  mean_weight))) +
  geom_line() +
  labs(title = "Mean Weight(g) Of Species of Rodent by Year", x = "Year",
       y = NULL, color = "Species")

```

-   Example 2

    Lab 4 Question 7

```{r dvs-2-2}
ggplot(data = avocado_ratios, mapping = aes(fill = Avocado_Type, x = region,
                                             y = total)) +
  geom_bar(position="fill", stat="identity") +
  scale_x_discrete(guide = guide_axis(n.dodge=2))+
  facet_wrap(~ type) +
  labs( x = "Region of CA", y = "Proportion of Mean Avocados Sold") +
  scale_fill_discrete(name = "Avocado Size", labels = c("Extra Large", "Large",
                                                        "Small"))

```

**DVS-3: I show creativity in my visualizations**

-   Example 1

    Lab 4 Question 5

```{r dvs-3-1}
ggplot(data = metros_avocado_data, mapping = aes(x = `Total Volume`,
                                                 y = region)) +
  geom_boxplot() +
  geom_jitter(alpha = .2) +
  labs(y = "Metros", title = "Metros With the Highest Average of Total Volume")
```

-   Example 2

    Lab 3 Question 10

```{r dvs-3-2}
ggplot(data = demographics_information, aes(x = age))+
  geom_histogram() + 
  facet_wrap(~ sex) +
  labs(x = "Age (years)", y = ("Count") , 
       title = "Histogram of Subject's Ages") +
  theme(legend.position = "none")
```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example 1

    Lab 4 Question 7

```{r dvs-4-1}
avocado_ratios <- four_cities |>
  pivot_longer(cols = c("Small_Hass":"Extra_Large_Hass"),
               names_to = "Avocado_Type",
               values_to = "Total") |>
  group_by(region,Avocado_Type, type) |>
  summarise(total = sum(Total))

```

-   Example 2

    Lab 5 Question 2.2

```{r dvs-4-2}
summarized_surveys <- surveys |>
  group_by(species, year) |>
  summarize(mean_weight = mean(weight)) 

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

    Lab 4 Question 6 (Revision)

```{r dvs-5-1}
averages <- four_cities |>
  group_by(region, type) |>
  summarise(average_avocado_price = mean(AveragePrice)) |>
  pivot_wider(names_from = type, values_from = average) |>
  mutate(Difference = abs(conventional - organic))
```

-   Example 2

    Lab 4 Question 7

```{r dvs-5-2}
avocado_ratios <- four_cities |>
  pivot_longer(cols = c("Small_Hass":"Extra_Large_Hass"),
               names_to = "Avocado_Type",
               values_to = "Total") |>
  group_by(region,Avocado_Type, type) |>
  summarise(total = sum(Total))

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

    Lab 4 Question 7

```{r dvs-6-1}
 averages <- four_cities |>
  group_by(region, type) |>
  summarise(average_avocado_price = mean(AveragePrice)) |>
  pivot_wider(names_from = type, values_from = average) |>
  mutate(Difference = abs(conventional - organic))
```

-   Example 2

    Lab 4 Question 7

```{r dvs-6-2}
avocado_ratios <- four_cities |>
  pivot_longer(cols = c("Small_Hass":"Extra_Large_Hass"),
               names_to = "Avocado_Type",
               values_to = "Total") |>
  group_by(region,Avocado_Type, type) |>
  summarise(total = sum(Total))

```

**DVS-7: I show creativity in my tables.**

-   Example 1

```{r dvs-7-1}

```

-   Example 2

```{r dvs-7-2}

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call

    PA3 Part 2

```{r pe-1-one-call}
mystery_school <- colleges_clean |>
  filter(REGION == "7", ADM_RATE > median(ADM_RATE), TUITION_DIFF != 0,
         SAT_AVG %% 2 != 0, STABBR != "ID" & STABBR != "MT", 
         as.numeric(UGDS)/4 < 1000/ADM_RATE) |>
  arrange(TUITIONFEE_IN,TUITIONFEE_OUT)
```

-   `across()`

    Lab 3 Question 5 (revision)

```{r pe-1-across}
hiphop_clean <- hiphop |>
  select(-c(numPreferredArtists , numOverallArtists)) |>
  mutate(
    across( .cols = c(word , subj , sex , ethnic , familiarity , fam1 , jayz ,
                  jayz1 , barkley , boondocks , boondocks1 , monique , bieber) ,
           ~as.factor(.x))
  )
```

-   `map()` functions

```{r pe-1-map-1}

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1

```{r pe2-1}

```

-   Example 2

```{r pe2-2}

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`

    Lab 3 Question 5 (revision)

```{r pe-3-across}
hiphop_clean <- hiphop |>
  select(-c(numPreferredArtists , numOverallArtists)) |>
  mutate(
    across( .cols = c(word , subj , sex , ethnic , familiarity , fam1 , jayz ,
                  jayz1 , barkley , boondocks , boondocks1 , monique , bieber) ,
           ~as.factor(.x))
  )

```

-   `map()` functions (Provide 2 Examples)

```{r pe-3-map-1}

```

```{r pe-3-map-2}

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   Example 1

    Lab 4 Question 7

```{r pe-4-1}
avocado_ratios <- four_cities |>
  pivot_longer(cols = c("Small_Hass":"Extra_Large_Hass"),
               names_to = "Avocado_Type",
               values_to = "Total") |>
  group_by(region,Avocado_Type, type) |>
  summarise(total = sum(Total))
```

-   Example 2

    Lab 3 Question 5 (revision)

```{r pe-4-2}
hiphop_clean <- hiphop |>
  select(-c(numPreferredArtists , numOverallArtists)) |>
  mutate(
    across( .cols = c(word , subj , sex , ethnic , familiarity , fam1 , jayz ,
                  jayz1 , barkley , boondocks , boondocks1 , monique , bieber) ,
           ~as.factor(.x))
  )
```

## Data Simulation & Modeling

**DSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r dsm-1-1}

```

-   Example 2

```{r dsm-1-2}

```

**DSM-2: I can fit a linear regression and extract necessary summary measures.**

-   Example 1

```{r dsm-2-1}

```

-   Example 2

```{r dsm-2-2}

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

Every Week, I have tried to revise my thinking by resubmitting Labs and Challenges that I did not get full credit on. This has turned out to be every week except week 5. However, I have been trying to incorporate corrections into new assignments, such as improving with visualizations and slicing to find max values in summaries. Additionally, some of the examples provided are revisions so that they can better show my abilities and attainment of learning objectives.

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

I wouldn't say that I have extended My thinking too often, but I always try to make use of outside sources in my code. For example, in Practice Activity 4, I used the "replace()" function to replace all instances of ".." or "xxx" to NA. Although I forgot to cite the page I found it on, I thought this method was much easier than using mutate() and if_else() and was much easier to read. Additionally, I use outside sources to help with labeling Visualizations, such as in Lab 4 when labeling the visualization of proportion of Avocados sold.

## Peer Support & Collaboration

<!-- Include an image of feedback you gave that you are proud of (either in a peer review or in Discord) -->

![](images/Screen%20Shot%202023-02-16%20at%2010.59.54%20AM.png){width="360"}
